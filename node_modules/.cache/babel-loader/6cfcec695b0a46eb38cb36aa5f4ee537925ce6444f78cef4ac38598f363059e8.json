{"ast":null,"code":"var _jsxFileName = \"/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatObjectForDisplay = (obj, prefix = '') => {\n  const formatEntry = (key, value) => {\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      return `${prefix}${key}: {\\n${formatObjectForDisplay(value, prefix + '  ')}\\n${prefix}}`;\n    } else if (Array.isArray(value)) {\n      return `${prefix}${key}: [\\n${value.map(v => formatObjectForDisplay(v, prefix + '  ')).join(',\\n')}\\n${prefix}]`;\n    } else {\n      return `${prefix}${key}: ${value}`;\n    }\n  };\n  return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join('\\n' + prefix);\n};\nexport const Chatbot = ({\n  handleLogout\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [awaitingConfirmation, setAwaitingConfirmation] = useState(false); // To track if we're waiting for user confirmation\n\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSend = () => {\n    const newMessages = [...messages, {\n      text: input,\n      from: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios.post(\"http://localhost:3005/api/vectordb/get_data\", {\n      input\n    }).then(res => {\n      // const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\" | \");\n      const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\"\\n\\n\");\n      const botResponse = {\n        text: formattedData,\n        from: \"bot\"\n      };\n      // const botResponse = { text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"), from: \"bot\" };\n      setMessages([...newMessages, botResponse]);\n\n      //after showing the data, ask for confirmation\n      setMessages(prev => [...prev, {\n        text: \"Was the displayed data correct? (yes/no)\",\n        from: \"bot\"\n      }]);\n      setAwaitingConfirmation(true); // Set to true to wait for user's response\n    }).catch(error => {\n      // console.error(\"Error\", error);\n      // Update the user interface to show an error message if db query was unsuccessful\n      console.error(\"Error\", error);\n      setMessages(prev => [...prev, {\n        text: \"Sorry, can you try again?\",\n        from: \"bot\"\n      }]);\n    });\n  };\n  const handleConfirmation = confirmation => {\n    if (awaitingConfirmation) {\n      // Handle the confirmation response here\n      axios.post(\"http://localhost:3005/api/vectordb/confirm_data\", {\n        confirmation,\n        input\n      }).then(res => {\n        setMessages(prev => [...prev, {\n          text: res.data.message,\n          from: \"bot\"\n        }]);\n      }).catch(error => {\n        console.error(\"Error confirming data\", error);\n      });\n      setAwaitingConfirmation(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `message ${msg.from}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      placeholder: \"Type a message...\",\n      onKeyDown: e => e.key === 'Enter' ? awaitingConfirmation ? handleConfirmation(input) : handleSend() : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: () => awaitingConfirmation ? handleConfirmation(input) : handleSend(),\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"ovfj/lNsphaQeRLgpF00kGnkxtY=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Title","axios","jsxDEV","_jsxDEV","formatObjectForDisplay","obj","prefix","formatEntry","key","value","Array","isArray","map","v","join","Object","entries","Chatbot","handleLogout","_s","messages","setMessages","input","setInput","awaitingConfirmation","setAwaitingConfirmation","handleInputChange","event","target","handleSend","newMessages","text","from","post","then","res","formattedData","data","bot","botResponse","prev","catch","error","console","handleConfirmation","confirmation","message","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","type","onChange","placeholder","onKeyDown","e","onClick","_c","$RefreshReg$"],"sources":["/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\n\n\nconst formatObjectForDisplay = (obj, prefix = '') => {\n  const formatEntry = (key, value) => {\n    if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n      return `${prefix}${key}: {\\n${formatObjectForDisplay(value, prefix + '  ')}\\n${prefix}}`;\n    } else if (Array.isArray(value)) {\n      return `${prefix}${key}: [\\n${value.map(v => formatObjectForDisplay(v, prefix + '  ')).join(',\\n')}\\n${prefix}]`;\n    } else {\n      return `${prefix}${key}: ${value}`;\n    }\n  };\n\n  return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join('\\n' + prefix);\n};\n\n\nexport const Chatbot = ({ handleLogout }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const [awaitingConfirmation, setAwaitingConfirmation] = useState(false); // To track if we're waiting for user confirmation\n\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSend = () => {\n    const newMessages = [...messages, { text: input, from: \"user\" }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios\n      .post(\"http://localhost:3005/api/vectordb/get_data\", { input })\n      .then((res) => {\n        // const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\" | \");\n        const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\"\\n\\n\");\n\n        const botResponse = { text: formattedData, from: \"bot\" };\n        // const botResponse = { text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"), from: \"bot\" };\n        setMessages([...newMessages, botResponse]);\n\n        //after showing the data, ask for confirmation\n        setMessages(prev => [...prev, { text: \"Was the displayed data correct? (yes/no)\", from: \"bot\" }]);\n        setAwaitingConfirmation(true);  // Set to true to wait for user's response\n      })\n      .catch((error) => {\n        // console.error(\"Error\", error);\n        // Update the user interface to show an error message if db query was unsuccessful\n        console.error(\"Error\", error);\n        setMessages(prev => [...prev, { text: \"Sorry, can you try again?\", from: \"bot\" }]);\n      });\n  };\n\n  const handleConfirmation = (confirmation) => {\n    if (awaitingConfirmation) {\n      // Handle the confirmation response here\n      axios.post(\"http://localhost:3005/api/vectordb/confirm_data\", { confirmation, input })\n        .then((res) => {\n          setMessages(prev => [...prev, { text: res.data.message, from: \"bot\" }]);\n        })\n        .catch((error) => {\n          console.error(\"Error confirming data\", error);\n        });\n      setAwaitingConfirmation(false);\n    }\n  };\n\n  return (\n    <div>\n      <h6>\n        <Title handleLogout={handleLogout} />\n      </h6>\n\n      <div className=\"chat-history\">\n        {messages.map((msg, index) => (\n          <p key={index} className={`message ${msg.from}`}>\n            {msg.text}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        placeholder=\"Type a message...\"\n        onKeyDown={(e) => e.key === 'Enter' ? awaitingConfirmation ? handleConfirmation(input) : handleSend() : null}\n      />\n      <button className=\"chat-button\" onClick={() => awaitingConfirmation ? handleConfirmation(input) : handleSend()}>\n        Send\n      </button>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}