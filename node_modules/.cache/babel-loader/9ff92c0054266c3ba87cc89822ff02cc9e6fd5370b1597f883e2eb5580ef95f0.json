{"ast":null,"code":"var _jsxFileName = \"/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chatbot = ({\n  handleLogout\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSend = () => {\n    const newMessages = [...messages, {\n      text: input,\n      from: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios.post(\"http://localhost:3005/api/user/validatePassword\", {\n      email,\n      pass\n    }).then(res => {\n      if (res.data.validation) {\n        alert(\"Your password is correct, Thank you!\");\n        onLoginSuccess();\n      } else {\n        alert(\"Your password is not correct, Please try again\");\n      }\n    });\n    const botResponse = {\n      text: \"Echo: \" + input,\n      from: \"bot\"\n    };\n    setMessages([...newMessages, botResponse]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `message ${msg.from}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Title","jsxDEV","_jsxDEV","Chatbot","handleLogout","_s","messages","setMessages","input","setInput","handleInputChange","event","target","value","handleSend","newMessages","text","from","axios","post","email","pass","then","res","data","validation","alert","onLoginSuccess","botResponse","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","msg","index","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Title } from \"./title\";\n\nexport const Chatbot = ({ handleLogout }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSend = () => {\n    const newMessages = [...messages, { text: input, from: \"user\" }];\n    setMessages(newMessages);\n    setInput(\"\");\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios\n      .post(\"http://localhost:3005/api/user/validatePassword\", { email, pass })\n      .then((res) => {\n        if (res.data.validation) {\n          alert(\"Your password is correct, Thank you!\");\n          onLoginSuccess();\n        } else {\n          alert(\"Your password is not correct, Please try again\");\n        }\n      });\n\n    const botResponse = { text: \"Echo: \" + input, from: \"bot\" };\n    setMessages([...newMessages, botResponse]);\n  };\n\n  return (\n    <div>\n      <h6>\n        <Title handleLogout={handleLogout} />\n      </h6>\n\n      <div className=\"chat-history\">\n        {messages.map((msg, index) => (\n          <p key={index} className={`message ${msg.from}`}>\n            {msg.text}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        placeholder=\"Type a message...\"\n      />\n      <button className=\"chat-button\" onClick={handleSend}>\n        Send\n      </button>\n    </div>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,KAAK,QAAQ,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMW,iBAAiB,GAAIC,KAAK,IAAK;IACnCF,QAAQ,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAC9B,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvB,MAAMC,WAAW,GAAG,CAAC,GAAGT,QAAQ,EAAE;MAAEU,IAAI,EAAER,KAAK;MAAES,IAAI,EAAE;IAAO,CAAC,CAAC;IAChEV,WAAW,CAACQ,WAAW,CAAC;IACxBN,QAAQ,CAAC,EAAE,CAAC;IACZ;IACAS,KAAK,CACFC,IAAI,CAAC,iDAAiD,EAAE;MAAEC,KAAK;MAAEC;IAAK,CAAC,CAAC,CACxEC,IAAI,CAAEC,GAAG,IAAK;MACb,IAAIA,GAAG,CAACC,IAAI,CAACC,UAAU,EAAE;QACvBC,KAAK,CAAC,sCAAsC,CAAC;QAC7CC,cAAc,CAAC,CAAC;MAClB,CAAC,MAAM;QACLD,KAAK,CAAC,gDAAgD,CAAC;MACzD;IACF,CAAC,CAAC;IAEJ,MAAME,WAAW,GAAG;MAAEZ,IAAI,EAAE,QAAQ,GAAGR,KAAK;MAAES,IAAI,EAAE;IAAM,CAAC;IAC3DV,WAAW,CAAC,CAAC,GAAGQ,WAAW,EAAEa,WAAW,CAAC,CAAC;EAC5C,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,gBACE3B,OAAA;MAAA2B,QAAA,eACE3B,OAAA,CAACF,KAAK;QAACI,YAAY,EAAEA;MAAa;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnC,CAAC,eAEL/B,OAAA;MAAKgC,SAAS,EAAC,cAAc;MAAAL,QAAA,EAC1BvB,QAAQ,CAAC6B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACvBnC,OAAA;QAAegC,SAAS,EAAG,WAAUE,GAAG,CAACnB,IAAK,EAAE;QAAAY,QAAA,EAC7CO,GAAG,CAACpB;MAAI,GADHqB,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN/B,OAAA;MACEoC,IAAI,EAAC,MAAM;MACXzB,KAAK,EAAEL,KAAM;MACb+B,QAAQ,EAAE7B,iBAAkB;MAC5B8B,WAAW,EAAC;IAAmB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACF/B,OAAA;MAAQgC,SAAS,EAAC,aAAa;MAACO,OAAO,EAAE3B,UAAW;MAAAe,QAAA,EAAC;IAErD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAC5B,EAAA,CApDWF,OAAO;AAAAuC,EAAA,GAAPvC,OAAO;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}