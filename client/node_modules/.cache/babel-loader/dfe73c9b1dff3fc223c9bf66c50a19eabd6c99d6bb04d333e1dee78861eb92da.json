{"ast":null,"code":"var _jsxFileName = \"/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatObjectForDisplay = obj => {\n  const formatEntry = (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      return `${key}: { ${formatObjectForDisplay(value)} }`; // Recursive call for nested objects\n    } else {\n      return `${key}: ${value}`;\n    }\n  };\n  return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join(\", \");\n};\nexport const Chatbot = ({\n  handleLogout\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSend = () => {\n    const newMessages = [...messages, {\n      text: input,\n      from: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios.post(\"http://localhost:3005/api/vectordb/get_data\", {\n      input\n    }).then(res => {\n      const botResponse = {\n        text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"),\n        from: \"bot\"\n      };\n      setMessages([...newMessages, botResponse]);\n    }).catch(error => {\n      console.error(\"Error\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `message ${msg.from}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Title","axios","jsxDEV","_jsxDEV","formatObjectForDisplay","obj","formatEntry","key","value","Object","entries","map","join","Chatbot","handleLogout","_s","messages","setMessages","input","setInput","handleInputChange","event","target","handleSend","newMessages","text","from","post","then","res","botResponse","data","bot","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\n\nconst formatObjectForDisplay = (obj) => {\n  const formatEntry = (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      return `${key}: { ${formatObjectForDisplay(value)} }`; // Recursive call for nested objects\n    } else {\n      return `${key}: ${value}`;\n    }\n  };\n\n  return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join(\", \");\n};\n\n\nexport const Chatbot = ({ handleLogout }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSend = () => {\n    const newMessages = [...messages, { text: input, from: \"user\" }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios\n      .post(\"http://localhost:3005/api/vectordb/get_data\", { input })\n      .then((res) => {\n        const botResponse = { text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"), from: \"bot\" };\n        setMessages([...newMessages, botResponse]);\n      })\n      .catch((error) => {\n        console.error(\"Error\", error);\n      });\n  };\n\n  return (\n    <div>\n      <h6>\n        <Title handleLogout={handleLogout} />\n      </h6>\n\n      <div className=\"chat-history\">\n        {messages.map((msg, index) => (\n          <p key={index} className={`message ${msg.from}`}>\n            {msg.text}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        placeholder=\"Type a message...\"\n      />\n      <button className=\"chat-button\" onClick={handleSend}>\n        Send\n      </button>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}