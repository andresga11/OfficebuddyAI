{"ast":null,"code":"var _jsxFileName = \"/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\n\n// const formatObjectForDisplay = (obj) => {\n//   const formatEntry = (key, value) => {\n//     if (typeof value === 'object' && value !== null) {\n//       return `${key}: { ${formatObjectForDisplay(value)} }`; // Recursive call for nested objects\n//     } else {\n//       return `${key}: ${value}`;\n//     }\n//   };\n\n//   return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join(\", \");\n// };\n\n// const formatObjectForDisplay = (obj, prefix = '') => {\n//   const formatEntry = (key, value) => {\n//     if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n//       return `${prefix}${key}: {\\n${formatObjectForDisplay(value, prefix + '  ')}\\n${prefix}}`;\n//     } else if (Array.isArray(value)) {\n//       return `${prefix}${key}: [\\n${value.map(v => formatObjectForDisplay(v, prefix + '  ')).join(',\\n')}\\n${prefix}]`;\n//     } else {\n//       return `${prefix}${key}: ${value}`;\n//     }\n//   };\n\n//   return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join('\\n' + prefix);\n// };\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Chatbot = ({\n  handleLogout\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n  const handleInputChange = event => {\n    setInput(event.target.value);\n  };\n  const handleSend = () => {\n    const newMessages = [...messages, {\n      text: input,\n      from: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios.post(\"http://localhost:3005/api/vectordb/get_data\", {\n      input\n    }).then(res => {\n      // const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\" | \");\n      const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\"\\n\\n\");\n      const botResponse = {\n        text: \"Echo: \" + formattedData,\n        from: \"bot\"\n      };\n      // const botResponse = { text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"), from: \"bot\" };\n      setMessages([...newMessages, botResponse]);\n    }).catch(error => {\n      console.error(\"Error\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        handleLogout: handleLogout\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: `message ${msg.from}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: input,\n      onChange: handleInputChange,\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"chat-button\",\n      onClick: handleSend,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"bxrUXnlHDt+zalfpk8IFX5tJV48=\");\n_c = Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","Title","axios","jsxDEV","_jsxDEV","Chatbot","handleLogout","_s","messages","setMessages","input","setInput","handleInputChange","event","target","value","handleSend","newMessages","text","from","post","then","res","formattedData","data","bot","map","obj","formatObjectForDisplay","join","botResponse","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","className","msg","index","type","onChange","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/andresga11/Desktop/OfficebuddyAI/src/chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Title } from \"./title\";\nimport axios from \"axios\";\n\n// const formatObjectForDisplay = (obj) => {\n//   const formatEntry = (key, value) => {\n//     if (typeof value === 'object' && value !== null) {\n//       return `${key}: { ${formatObjectForDisplay(value)} }`; // Recursive call for nested objects\n//     } else {\n//       return `${key}: ${value}`;\n//     }\n//   };\n\n//   return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join(\", \");\n// };\n\n// const formatObjectForDisplay = (obj, prefix = '') => {\n//   const formatEntry = (key, value) => {\n//     if (typeof value === 'object' && value !== null && !Array.isArray(value)) {\n//       return `${prefix}${key}: {\\n${formatObjectForDisplay(value, prefix + '  ')}\\n${prefix}}`;\n//     } else if (Array.isArray(value)) {\n//       return `${prefix}${key}: [\\n${value.map(v => formatObjectForDisplay(v, prefix + '  ')).join(',\\n')}\\n${prefix}]`;\n//     } else {\n//       return `${prefix}${key}: ${value}`;\n//     }\n//   };\n\n//   return Object.entries(obj).map(([key, value]) => formatEntry(key, value)).join('\\n' + prefix);\n// };\n\n\nexport const Chatbot = ({ handleLogout }) => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setInput(event.target.value);\n  };\n\n  const handleSend = () => {\n    const newMessages = [...messages, { text: input, from: \"user\" }];\n    setMessages(newMessages);\n    setInput(\"\");\n\n    // Here you would typically send the input to your chatbot backend and get a response\n    axios\n      .post(\"http://localhost:3005/api/vectordb/get_data\", { input })\n      .then((res) => {\n        // const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\" | \");\n        const formattedData = res.data.bot.map(obj => formatObjectForDisplay(obj)).join(\"\\n\\n\");\n\n        const botResponse = { text: \"Echo: \" + formattedData, from: \"bot\" };\n        // const botResponse = { text: \"Echo: \" + res.data.bot.map(obj => obj.text).join(\", \"), from: \"bot\" };\n        setMessages([...newMessages, botResponse]);\n      })\n      .catch((error) => {\n        console.error(\"Error\", error);\n      });\n  };\n\n  return (\n    <div>\n      <h6>\n        <Title handleLogout={handleLogout} />\n      </h6>\n\n      <div className=\"chat-history\">\n        {messages.map((msg, index) => (\n          <p key={index} className={`message ${msg.from}`}>\n            {msg.text}\n          </p>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={handleInputChange}\n        placeholder=\"Type a message...\"\n      />\n      <button className=\"chat-button\" onClick={handleSend}>\n        Send\n      </button>\n    </div>\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}